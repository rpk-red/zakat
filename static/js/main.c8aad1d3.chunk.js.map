{"version":3,"sources":["components/pages/shared/UserAvatar.js","components/pages/shared/Appbar.js","components/pages/shared/Layout.js","App.js","Root.js","serviceWorker.js","index.js"],"names":["UserAvatar","props","React","useState","anchorEl","setAnchorEl","open","Boolean","handleClose","IconButton","aria-label","aria-controls","aria-haspopup","onClick","event","currentTarget","color","Menu","id","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","MenuItem","Appbar","AppBar","Toolbar","Grid","container","justify","alignItems","texts","selectedSwitch","fontColor","eachSwitchWidth","height","fontSize","bgColor","selectedSwitchColor","selectedFontColor","borderWidth","Layout","App","path","Root","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qTAwDeA,EAhDI,SAAAC,GAAU,IAAD,EACQC,IAAMC,SAAS,MADvB,mBACjBC,EADiB,KACPC,EADO,KAElBC,EAAOC,QAAQH,GAMfI,EAAc,WAChBH,EAAY,OAEhB,OACI,oCACI,kBAACI,EAAA,EAAD,CACIC,aAAW,0BACXC,gBAAc,cACdC,gBAAc,OACdC,QAbO,SAAAC,GACfT,EAAYS,EAAMC,gBAaVC,MAAM,WAEN,kBAAC,IAAD,OAEJ,kBAACC,EAAA,EAAD,CACIC,GAAG,cACHd,SAAUA,EACVe,aAAc,CACVC,SAAU,SACVC,WAAY,UAEhBC,aAAW,EACXC,gBAAiB,CACbH,SAAU,MACVC,WAAY,UAEhBf,KAAMA,EACNkB,QAAShB,GAET,kBAACiB,EAAA,EAAD,CAAUZ,QAASL,GAAnB,WACA,kBAACiB,EAAA,EAAD,CAAUZ,QAASL,GAAnB,iBCDDkB,EAjCA,SAAAzB,GACX,OACI,kBAAC0B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,gBAAgBC,WAAW,UAC/C,8BACA,kBAAC,IAAD,CACIC,MAAO,CACH,OACA,UACA,aAEJC,eAAgB,EAChBC,UAAU,OACVC,gBAAiB,IACjBC,OAAO,OACPC,SAAS,OACTC,QAAQ,YACRC,oBAAoB,QACpBC,kBAAkB,QAClBC,YAAa,IAEjB,kBAAC,EAAD,UCfLC,EAdA,WACX,OACI,oCACI,kBAAC,EAAD,MACA,yCCeGC,EAlBH,WACV,OACE,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,SACV,+BAEF,kBAAC,IAAD,CAAOA,KAAK,YACV,+BAEF,kBAAC,IAAD,CAAOA,KAAK,cACV,kCCJKC,EAPF,kBACT,kBAAC,IAAD,KACI,kBAAC,EAAD,QCIYvC,QACW,cAA7BwC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD6H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c8aad1d3.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\n\r\nconst UserAvatar = props => {\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const open = Boolean(anchorEl);\r\n\r\n    const handleMenu = event => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n    return (\r\n        <>\r\n            <IconButton\r\n                aria-label=\"account of current user\"\r\n                aria-controls=\"menu-appbar\"\r\n                aria-haspopup=\"true\"\r\n                onClick={handleMenu}\r\n                color=\"inherit\"\r\n            >\r\n                <AccountCircle />\r\n            </IconButton>\r\n            <Menu\r\n                id=\"menu-appbar\"\r\n                anchorEl={anchorEl}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'center',\r\n                }}\r\n                keepMounted\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                }}\r\n                open={open}\r\n                onClose={handleClose}\r\n            >\r\n                <MenuItem onClick={handleClose}>Profile</MenuItem>\r\n                <MenuItem onClick={handleClose}>My account</MenuItem>\r\n            </Menu>\r\n        </>\r\n    )\r\n}\r\n\r\nUserAvatar.propTypes = {\r\n\r\n}\r\n\r\nexport default UserAvatar\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport MultiSwitch from 'react-multi-switch-toggle'\r\nimport UserAvatar from './UserAvatar';\r\n\r\n\r\n\r\nconst Appbar = props => {\r\n    return (\r\n        <AppBar>\r\n            <Toolbar>\r\n                <Grid container justify=\"space-between\" alignItems=\"center\">\r\n                    <div />\r\n                    <MultiSwitch\r\n                        texts={[\r\n                            \"Past\",\r\n                            \"Present\",\r\n                            \"Potential\"\r\n                        ]}\r\n                        selectedSwitch={2}\r\n                        fontColor=\"grey\"\r\n                        eachSwitchWidth={100}\r\n                        height=\"42px\"\r\n                        fontSize=\"14px\"\r\n                        bgColor=\"lightgrey\"\r\n                        selectedSwitchColor=\"white\"\r\n                        selectedFontColor=\"black\"\r\n                        borderWidth={0}\r\n                    />\r\n                    <UserAvatar />\r\n                </Grid>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\nAppbar.propTypes = {\r\n\r\n}\r\n\r\nexport default Appbar\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport Appbar from './Appbar'\r\n\r\nconst Layout = () => {\r\n    return (\r\n        <>\r\n            <Appbar />\r\n            <div>\r\n                Layout\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nLayout.propTypes = {\r\n}\r\n\r\nexport default Layout\r\n","import React from 'react';\n\nimport { Switch, Route } from 'react-router-dom';\n\nimport Layout from './components/pages/shared/Layout';\n\nconst App = () => {\n  return (\n    <Layout>\n      <Switch>\n        <Route path=\"/past\">\n          <div />\n        </Route>\n        <Route path=\"/present\">\n          <div />\n        </Route>\n        <Route path=\"/potencial\">\n          <div />\n        </Route>\n      </Switch>\n    </Layout>\n  );\n}\n\nexport default App;\n","import React from 'react'\r\n\r\nimport { BrowserRouter as Router } from \"react-router-dom\"\r\n\r\nimport App from \"./App\";\r\n\r\nconst Root = () => (\r\n    <Router>\r\n        <App />\r\n    </Router>\r\n)\r\n\r\n\r\nexport default Root;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Root from './Root';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}